
#include "YLH_Acceptor_Handler.h"
#include "YLH_Acceptor.h"

static const int timer_id = -1;


YLH_Acceptor_Handler::YLH_Acceptor_Handler()
:m_Owner_Acceptor(NULL)
{

}
YLH_Acceptor_Handler::YLH_Acceptor_Handler(YLH_Acceptor* acceptor)
:m_Owner_Acceptor(acceptor)
{
    ACE_ASSERT(m_Owner_Acceptor != NULL);
}

int YLH_Acceptor_Handler::open( void * p/*= 0*/ )
{
    super::open(p);

    m_Owner_Acceptor = (YLH_Acceptor*) p;

    reactor(m_Owner_Acceptor->get_Owner_Reactor());

    ACE_HANDLE fd = get_handle();
    m_Owner_Acceptor->add_accept_handler(fd, this);

    this->reactor()->register_handler(this, ACE_Event_Handler::WRITE_MASK);
    this->reactor()->mask_ops(this, ACE_Event_Handler::WRITE_MASK, ACE_Reactor::CLR_MASK);
    //m_Owner_Acceptor->reactor()->register_handler(this, ACE_Event_Handler::ACCEPT_MASK/* | ACE_Event_Handler::CONNECT_MASK*/);
    //m_Owner_Acceptor->reactor()->register_handler(this, ACE_Event_Handler::ACCEPT_MASK | 
    //                                                    ACE_Event_Handler::READ_MASK | 
    //                                                    ACE_Event_Handler::WRITE_MASK);

    reactor()->schedule_timer(this, (void*)(timer_id), ACE_Time_Value(15));
    return 1;
}

int YLH_Acceptor_Handler::handle_input( ACE_HANDLE fd /* = ACE_INVALID_HANDLE */ )
{
    printf("YLH_Acceptor_Handler::handle_input\n");
    
    static const size_t RECV_BUF_SIZE = 1024 * 4;

    static int  get_length = 0;

    // local receive buffer.
    char recvbuf[RECV_BUF_SIZE] = { 0 };

    // If has prev message then prepend to local receive buffer.

    // actually received size.
    int s_recv = 0;

    // read socket buffer as much as possible.

    // read data into local buffer from socket.
    for (; (s_recv = this->peer().recv(recvbuf, RECV_BUF_SIZE)) > 0;) {

        get_length += s_recv;
        printf("%s", recvbuf);
        //process_received_buffer(recvbuf, s_recv);
    }


    // MF_ERROR("length = %d!..... \n", get_length);

    int last_err = ACE_OS::last_error();

    if (s_recv == -1 &&  last_err == EWOULDBLOCK) 
    {
        return 0;
    }
    return -1;
}

int YLH_Acceptor_Handler::handle_output( ACE_HANDLE fd /* = ACE_INVALID_HANDLE */ )
{
    printf("YLH_Acceptor_Handler::handle_output\n");
    return -1;
}

int YLH_Acceptor_Handler::handle_close( ACE_HANDLE /*= ACE_INVALID_HANDLE*/, ACE_Reactor_Mask /*= ACE_Event_Handler::ALL_EVENTS_MASK*/ )
{
    printf("YLH_Acceptor_Handler::handle_close\n");
    return -1;
}

int YLH_Acceptor_Handler::handle_timeout( const ACE_Time_Value &time, const void * act)
{
    std::string send_buff("send_buff");
    int act_id(static_cast<int>(reinterpret_cast<const intptr_t>(act)));
    if(act_id == timer_id)
    {		
        int  send_size = peer().send(send_buff.c_str(), send_buff.size());

        printf("YLH_Acceptor_Handler::handle_timeout send_size[%d]\n", send_size);
        int kk = 0;
    }

    return 0;
}

